<?php

// lib require("vendor/autoload.php"); use PhpParser\Error; use PhpParser\ParserFactory; use PhpParser\PrettyPrinter;

echo "v0.00 PHP simple tainterscanner \n"; echo "usage $argv[0] file.php \n\n\n";

$code = file_get_contents($argv[1]);



$parser = (new PhpParser\ParserFactory)->create(PhpParser\ParserFactory::PREFER_PHP7); //$nodeDumper = new PhpParser\NodeDumper;

echo "[DEBUG] Pretty print Node dumper from PHPParser \n\n"; try {
    $stmts = $parser->parse($code);
    //var_dump($stmts);
    //echo $nodeDumper->dump($stmts), "\n";
} catch (PhpParser\Error $e) {
    echo 'Parse Error: ', $e->getMessage();
  };




// START SCAN FUNCTION HERE , entry is an array echo "Searching for tainted inputs by walking recursively the PHPParser array \n\n";


$stack = array(); array_walk($stmts, 'check_user_input');




function walk_phpparser_array($phpparserarray,$stack,$position) {

global $stack;

foreach $phpparseritem as $phpparserarray => $row { unset($stack); check_user_input($row)
}


}





function check_user_input($value, $key) {

//echo "checking item ... \n"; //var_dump($item);

//global $stack; //unset($stack); //array_push($stack,$item); //var_dump($stack);


// scanning user input if ($value == "_GET") { // replace with all user inputs source
  echo "***************** !!! IS TAINTED DETECTED !!! ***************** >>>> \n";
  var_dump($ite);
  var_dump($stack);
}

if (is_object($item) ) {
    
    array_walk($item,'check_user_input');
}

if (is_array($item)) {
    foreach ($item as $objectkey => $value) {
       if ($value == "_GET")
       {
        echo "***************** !!! TAINTED DETECTED !!! ***************** >>>> ";
        var_dump($value);
        echo ("in the objet " . var_dump($item));
        var_dump($item -> $objectkey);
       }   
    }

    array_walk($item,'check_user_input');
}

} // end of check user input function





function dangerous_sink($item, $key) {

if ($item == "shell_exec") {
  echo "found sink >>>>>>>>>>>>>>>>>> \n";
  var_dump($item);
}


};


